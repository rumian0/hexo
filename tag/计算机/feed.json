{
    "version": "https://jsonfeed.org/version/1",
    "title": "茗辰原 • All posts by \"计算机\" tag",
    "description": "茶香四溢,编程世界.",
    "home_page_url": "https://mingcy.cn",
    "items": [
        {
            "id": "https://mingcy.cn/2024/05/25/Vercel-Typecho/",
            "url": "https://mingcy.cn/2024/05/25/Vercel-Typecho/",
            "title": "Vercel部署Typecho 博客",
            "date_published": "2024-05-24T16:00:00.000Z",
            "content_html": "<p>&lt;aside&gt;<br>\n😀 这里写文章的概述：<br>\n本文介绍了如何使用 Vercel 部署 Typecho 博客。内容包括准备工作和具体操作步骤，如创建 GitHub 仓库、配置文件、上传主题等。通过 Vercel 部署项目并添加域名，实现博客部署和初始化。操作简单明了，适合初学者。文章重点强调了 Vercel 支持 PHP 部署，提供了详细的操作指南，包括代码示例和截图，让读者能够轻松完成部署过程。</p>\n<p>&lt;/aside&gt;</p>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>相信很多人不知道 Vercel 可以部署 PHP，可以在 <a href=\"https://vercel.com/docs/runtimes?query=php#advanced-usage/community-runtimes\"><strong>Vercel 文档</strong></a> 中看到确实支持</p>\n<h2 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h2>\n<ol>\n<li><a href=\"https://github.com\">Github</a> 账号</li>\n<li><a href=\"https://vercel.com/\">Vercel</a> 账号</li>\n<li><a href=\"https://typecho.org/\">Typecho</a> 程序</li>\n<li>数据库</li>\n<li>自己的域名（可选，国内注册可以首年 1 元甚至免费）部署完成之后默认会给你的项目分配一个 vercel.app 的三级域名，但是在 2021 年 vercel.app 域名被墙，大陆地区无法访问，因此强烈建议自己准备域名</li>\n</ol>\n<h2 id=\"过程\"><a class=\"anchor\" href=\"#过程\">#</a> 过程</h2>\n<ol>\n<li>创建 Github 仓库</li>\n<li>本地解压 Typecho 程序</li>\n<li>在根目录下新建  <code>vercel.json</code>  并填入以下代码</li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"functions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"api/index.php\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"runtime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vercel-php@0.6.0\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"routes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/(.*)\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"dest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/api/index.php\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>在根目录下新建  <code>config.inc.php</code>  并填入以下代码</li>\n</ol>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * Typecho Blog Platform</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @copyright  Copyright (c) 2008 Typecho team (http://www.typecho.org)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @license    GNU General Public License 2.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @version    $Id$</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/** 开启 https */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'__TYPECHO_SECURE__'</span><span class=\"token punctuation\">,</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/** 定义根目录 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'__TYPECHO_ROOT_DIR__'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/** 定义插件目录 (相对路径) */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'__TYPECHO_PLUGIN_DIR__'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/usr/plugins'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">/** 定义模板目录 (相对路径) */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'__TYPECHO_THEME_DIR__'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/usr/themes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/** 后台路径 (相对路径) */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'__TYPECHO_ADMIN_DIR__'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'/admin/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/** 设置包含路径 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>@<span class=\"token function\">set_include_path</span><span class=\"token punctuation\">(</span><span class=\"token function\">get_include_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PATH_SEPARATOR</span> <span class=\"token operator\">.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token constant\">__TYPECHO_ROOT_DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/var'</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PATH_SEPARATOR</span> <span class=\"token operator\">.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token constant\">__TYPECHO_ROOT_DIR__</span> <span class=\"token operator\">.</span> <span class=\"token constant\">__TYPECHO_PLUGIN_DIR__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">/** 载入 API 支持 */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">require_once</span> <span class=\"token string single-quoted-string\">'Typecho/Common.php'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/** 程序初始化 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token class-name static-context\">Typecho_Common</span><span class=\"token operator\">::</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/** 定义数据库参数 */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token variable\">$db</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Typecho_Db</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Pdo_Mysql'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'typecho_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token variable\">$db</span><span class=\"token operator\">-></span><span class=\"token function\">addServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token string single-quoted-string\">'host'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'数据库地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token string single-quoted-string\">'user'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'数据库用户名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token string single-quoted-string\">'password'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'数据库密码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token string single-quoted-string\">'charset'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'utf8mb4'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token string single-quoted-string\">'port'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'3306'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token string single-quoted-string\">'database'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'数据库名称'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token string single-quoted-string\">'engine'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'MyISAM'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name static-context\">Typecho_Db</span><span class=\"token operator\">::</span><span class=\"token class-name\">READ</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Typecho_Db</span><span class=\"token operator\">::</span><span class=\"token constant\">WRITE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token class-name static-context\">Typecho_Db</span><span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$db</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>在根目录下新建  <code>/api/index.php</code>  并填入以下代码</li>\n</ol>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$file</span><span class=\"token operator\">=</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/..'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"PHP_SELF\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">require_once</span> <span class=\"token constant\">__DIR__</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'/../index.php'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#echo $_SERVER[\"PHP_SELF\"];</span></pre></td></tr></table></figure><ol>\n<li>\n<p>下载一个自己心仪的主题解压放到  <code>/usr/themes/</code>  目录下</p>\n</li>\n<li>\n<p>将所有文件上传到第一步创建好的 GitHub 仓库里</p>\n</li>\n<li>\n<p>打开 <a href=\"https://vercel.com/\"><strong>Vercel</strong></a> 然后通过 GitHub 快捷登录</p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.xalaok.top/images/blog/2023/05/06/4.jpg\" alt=\"https://cdn.xalaok.top/images/blog/2023/05/06/4.jpg\"></p>\n</li>\n<li>\n<p>登陆后会自动跳转 Dashboard，点击 Add new - Project</p>\n<p><img loading=\"lazy\" data-src=\"https://cdn.xalaok.top/images/blog/2023/05/06/5.jpg\" alt=\"https://cdn.xalaok.top/images/blog/2023/05/06/5.jpg\"></p>\n</li>\n<li>\n<p>Import Git Repository 选择 Continue With GitHub 此时会跳转到 GitHub 批准 Vercel 访问，建议选择允许访问全部仓库，当然你也可以设置仅可访问部分仓库。</p>\n</li>\n<li>\n<p>选择你的仓库</p>\n</li>\n<li>\n<p>即将开始部署，在这个界面你可以设置项目名称（可以随意设置），其他项全部保持默认即可，最后点击 Deploy 部署</p>\n</li>\n<li>\n<p>部署成功后会显示 Congratulation 页面</p>\n</li>\n<li>\n<p>如果你有域名，直接从此界面右边 “Add Domain” 进入添加域名，Vercel 会自动生成 SSL 证书（开启 https）。没有的话直接右上角 “Go to Dashboard” 就可以看到 Vercel 为你准备的域名</p>\n</li>\n<li>\n<p>打开  <code>https://你的网址/install.php</code>  初始化</p>\n</li>\n</ol>\n<p>SO easy!</p>\n",
            "tags": [
                "建站",
                "网站建站",
                "计算机"
            ]
        },
        {
            "id": "https://mingcy.cn/2024/04/30/jsj-know/",
            "url": "https://mingcy.cn/2024/04/30/jsj-know/",
            "title": "计算机的基础知识",
            "date_published": "2024-04-29T16:00:00.000Z",
            "content_html": "<p>&lt;aside&gt;<br>\n😆 前言：我们都有过玩计算机的时光，但是计算机已经出世折磨久了，你知道的基础知识又有多少呢？来更我一些学习学习吧！</p>\n<p>&lt;/aside&gt;</p>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>计算机的基础知识主要包括以下几个方面：</p>\n<p>1️⃣. 计算机系统组成：计算机是由硬件、软件和网络三大部分组成的。硬件包括 CPU、内存、存储设备、输入输出设备等；软件包括操作系统、应用程序等；网络则包括互联网、局域网等。</p>\n<p>2️⃣. 计算机操作系统：操作系统是管理计算机硬件与软件资源的程序，它是计算机系统的灵魂。常见的操作系统有 Windows、macOS、Linux 等。</p>\n<p>3️⃣. 计算机编程语言：编程语言是用来编写计算机程序的语言。常见的编程语言有 C、C++、Java、Python 等。</p>\n<p>4️⃣. 计算机网络：计算机网络是计算机之间相互通信、共享资源的系统。包括互联网、局域网、广域网等类型。</p>\n<p>5️⃣. 数据结构与算法：数据结构是指数据在计算机中的组织方式，算法是指解决特定问题的步骤。掌握常用的数据结构和算法对于编写高效程序非常重要。</p>\n<p>6️⃣. 数据库：数据库是组织、存储和管理数据的仓库。常见的数据库有关系型数据库（如 MySQL、Oracle 等）和非关系型数据库（如 MongoDB、Redis 等）。</p>\n<p>7️⃣. 信息安全：信息安全涉及计算机系统和数据的保密性、完整性和可用性。包括加密算法、身份认证、访问控制等技术。</p>\n<p>这些知识点构成了计算机科学的基础，学习并掌握这些知识对于成为一名合格的计算机专业人员非常重要。</p>\n<p>SO，我们主要围绕这几块的知识进行介绍和讲解。</p>\n<h1 id=\"计算机系统组成\"><a class=\"anchor\" href=\"#计算机系统组成\">#</a> 计算机系统组成</h1>\n<p>计算机系统的组成：硬件、软件和网络</p>\n<h2 id=\"硬件\"><a class=\"anchor\" href=\"#硬件\">#</a> 硬件：</h2>\n<ul>\n<li>CPU（中央处理器）：计算机的大脑，负责解释和执行程序指令，以及进行数据运算。</li>\n<li>内存（随机存取存储器）：提供临时的存储空间，以供 CPU 快速访问处理中的数据和指令。</li>\n<li>存储设备：包括硬盘驱动器（HDD）、固态驱动器（SSD）等，用于长期存储大量的数据和程序。</li>\n<li>输入输出设备：如键盘、鼠标、显示器、打印机等，允许用户与计算机交互，并将计算机处理的结果展示给用户。</li>\n</ul>\n<h2 id=\"软件\"><a class=\"anchor\" href=\"#软件\">#</a> 软件：</h2>\n<ul>\n<li>操作系统（OS）：管理计算机的硬件资源，并提供用户与硬件之间的接口。</li>\n<li>应用程序：为用户提供具体的任务处理能力，包括文字处理软件、图像编辑软件、数据库管理系统等。</li>\n<li>开发工具和系统软件：支持软件的创建、维护和更新，如编译器、调试器、驱动程序等。</li>\n</ul>\n<h2 id=\"网络\"><a class=\"anchor\" href=\"#网络\">#</a> 网络：</h2>\n<ul>\n<li>互联网：全球性的网络，由数以亿计的计算机和网络设备通过各种有线和无线的方式连接而成。</li>\n<li>局域网（LAN）：在较小地理范围内建立的网络，如办公室、学校或家庭网络。</li>\n</ul>\n<p>这三大部分相互协作，构成了现代计算机系统的基础，使得信息能够在全球范围内传播和共享。了解这些组成部分的工作原理和相互关系，对于深入理解和有效使用计算机系统至关重要。</p>\n<h2 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h2>\n<ol>\n<li>&quot;这个世界如此多彩，就像计算机硬件的世界一样，每个组件都是如此重要，就像一幅艺术品的每个细节。💻✨&quot;</li>\n<li>&quot;CPU 是计算机的大脑，它默默地计算着我们的梦想，让我们的想法变为现实。💡❤️&quot;</li>\n<li>&quot;内存就像是计算机的记忆，它为我们保存着宝贵的瞬间，就像一本回忆的相册。📸🌈&quot;</li>\n<li>&quot;存储设备是我们的数字宝库，它们承载着我们的故事，就像无尽的书籍和电影库。📚🎥&quot;</li>\n<li>&quot;键盘是文字的舞台，鼠标是创意的指挥棒，显示器是我们创造世界的窗口。🎭🌟&quot;</li>\n<li>&quot;操作系统像一位无所不能的导演，将硬件和软件的演员们组织起来，呈现出精彩的表演。🎬🌟&quot;</li>\n<li>&quot;应用程序是我们的魔法工具箱，它们让我们能够实现无数的愿望，从创作到娱乐，应有尽有。✨🔧&quot;</li>\n<li>&quot;互联网连接着全球的心，让我们能够分享、学习和相互交流，就像一座无边的智慧宝库。🌍💡&quot;</li>\n<li>&quot;局域网是人与人之间的桥梁，让我们在小范围内连接起来，分享快乐和知识。🌐🤝&quot;</li>\n</ol>\n<h1 id=\"计算机操作系统\"><a class=\"anchor\" href=\"#计算机操作系统\">#</a> 计算机操作系统</h1>\n<p>当谈到计算机操作系统时，除了常见的 Windows、macOS 和 Linux，还有其他一些重要的操作系统，例如：</p>\n<ol>\n<li>Unix：Unix 是一个多用户、多任务的操作系统，具有良好的稳定性和可靠性。它是许多其他操作系统的基础，包括 Linux 和 macOS。🌐🔒</li>\n<li>Android：Android 是为移动设备设计的操作系统，由 Google 开发。它是目前最流行的移动操作系统之一，运行在众多智能手机、平板电脑和其他便携设备上。📱🤖</li>\n<li>iOS：iOS 是由 Apple 开发的移动操作系统，专门为 iPhone、iPad 和 iPod Touch 等设备设计。它提供了丰富的应用程序生态系统和用户友好的界面。🍎📱</li>\n<li>Windows Server：Windows Server 是微软公司针对服务器环境开发的操作系统。它提供了一系列的服务器管理工具和功能，用于支持企业级应用程序和网络服务。💻🏢</li>\n<li>FreeBSD：FreeBSD 是基于 Unix 的自由开源操作系统，具有高度的可靠性、稳定性和性能。它被广泛用于服务器和嵌入式系统。🐧🔒</li>\n<li>Chrome OS：Chrome OS 是由 Google 开发的基于 Linux 内核的操作系统，主要用于 Chromebook 笔记本电脑。它专注于云计算和 Web 应用程序，具有快速启动和简洁的界面。7. Solaris：Solaris 是由 Oracle 开发的商业 Unix 操作系统，主要用于企业级服务器和工作站。它具有高度的可扩展性和安全性。☀️🔒</li>\n</ol>\n<p>这些操作系统在不同的领域和应用中发挥着重要的作用。它们提供了对硬件资源的管理、用户界面的提供、应用程序的运行以及数据和文件的管理等功能。通过了解不同的操作系统，我们可以更好地理解计算机系统的多样性和复杂性。💻✨</p>\n<h1 id=\"计算机编程语言\"><a class=\"anchor\" href=\"#计算机编程语言\">#</a> 计算机编程语言</h1>\n<p>当谈到计算机编程语言时，有许多常见的编程语言可供选择，每种语言都有其独特的特点和应用领域。以下是一些常见的编程语言及其对应的表情：</p>\n<ol>\n<li>C 语言：C 语言是一种通用的高级编程语言，它具有高效性和灵活性，被广泛用于系统级编程和嵌入式系统开发。🔧🐱</li>\n<li>C<ins> 语言：C</ins> 语言是 C 语言的扩展，增加了面向对象编程的特性。它被广泛应用于游戏开发、图形界面和大规模系统开发等领域。💻🔧🐱</li>\n<li>Java 语言：Java 语言是一种跨平台的编程语言，被广泛用于企业级应用程序开发、移动应用程序和大型系统的构建。☕️🌍</li>\n<li>Python 语言：Python 语言是一种易于学习和使用的高级编程语言，具有清晰简洁的语法和丰富的库支持。它被广泛用于数据分析、人工智能、Web 开发等领域。🐍🔧🌐</li>\n<li>JavaScript 语言：JavaScript 语言是一种用于 Web 开发的脚本语言，它可以在网页上实现交互性和动态性。它是前端开发的重要组成部分。🌐💡</li>\n<li>Ruby 语言：Ruby 语言是一种简洁优雅的编程语言，注重开发人员的幸福感。它被广泛用于 Web 开发和快速原型设计。💎🔧💻</li>\n<li>Go 语言：Go 语言是由 Google 开发的一种现代编程语言，具有高效的并发性和简单的语法。它适用于网络服务和分布式系统的开发。🔧🐹</li>\n<li>易语言：是一个专为中文编写的一门语言，简单的语法，中国人清晰易懂的语法，专为编写软件等领域而生，现在这门语言已用于更广的舞台。 💗 🫰</li>\n</ol>\n<p>这些编程语言各有特点，适用于不同的应用场景。根据你的需求和兴趣，选择适合的编程语言进行学习和开发将有助于你在计算机编程领域取得成功。💻✨</p>\n<h1 id=\"计算机网络\"><a class=\"anchor\" href=\"#计算机网络\">#</a> 计算机网络</h1>\n<p>计算机网络是一种将多台计算机连接起来，使它们能够相互通信和共享资源的系统。它是现代信息技术的基础，支持了互联网的发展以及各种在线服务和应用的实现。计算机网络可以分为以下几种类型：</p>\n<ol>\n<li>互联网（Internet）：互联网是全球最大的计算机网络，连接了全球的计算机和网络设备。它采用 TCP/IP 协议族作为通信协议，为人们提供了访问各种资源和服务的途径，如电子邮件、网页浏览、在线视频和社交媒体等。🌐🌍</li>\n<li>局域网（LAN）：局域网是在有限的地理范围内连接计算机和设备的网络，例如家庭、办公室或校园。它通常使用以太网技术，并提供高速数据传输和资源共享，支持内部通信和协作。💻🏢🏫</li>\n<li>广域网（WAN）：广域网是连接不同地理位置的计算机和局域网的网络。它可以覆盖较大的地理范围，通过公共或专用的通信线路实现远程通信和数据传输。广域网常用于企业之间、分支机构之间以及地理范围更广的组织间的连接。🌍🔁</li>\n<li>无线局域网（WLAN）：无线局域网是使用无线通信技术实现的局域网，允许设备通过无线信号进行通信和连接。常见的无线局域网标准包括 Wi-Fi，它使得用户可以在范围内自由移动，并无线访问网络和资源。📶💻🔁</li>\n<li>城域网（MAN）：城域网是覆盖城市范围的计算机网络，连接了多个局域网和广域网。它通常由政府、学术机构和企业组织共同建设和管理，用于提供城市范围的高速通信和互联互通。🏙️🔁</li>\n</ol>\n<p>计算机网络通过使用不同的通信协议和技术，如 TCP/IP、Ethernet、无线技术等，实现了数据的传输和交换。它们提供了可靠的数据传输、资源共享、远程访问和协作等功能，对于现代社会的信息交流和经济发展起到了重要的推动作用。通过理解计算机网络的原理和技术，我们可以更好地使用和管理网络资源，保障网络安全和性能。🌐🔒💻</p>\n<h1 id=\"数据结构与算法\"><a class=\"anchor\" href=\"#数据结构与算法\">#</a> 数据结构与算法</h1>\n<p>数据结构是一种组织和存储数据的方式，它涉及到数据元素之间的关系、操作和存储方式。常见的数据结构包括数组、链表、栈、队列、树、图等。不同的数据结构适用于不同的应用场景，可以提供高效的数据访问和操作方式。</p>\n<p>算法是一组解决特定问题的有序步骤或方法。它描述了在给定输入下，通过一系列操作来产生输出的过程。算法可以用来解决各种计算问题，如排序、搜索、图遍历、最短路径等。良好的算法设计可以提高程序的效率和性能。</p>\n<p>掌握常用的数据结构和算法对于编写高效的程序和解决复杂的问题至关重要。以下是一些常见的数据结构和算法：</p>\n<ol>\n<li>数据结构：\n<ul>\n<li>数组（Array）：一组按顺序存储的元素集合。</li>\n<li>链表（Linked List）：通过节点和指针连接的数据元素集合。</li>\n<li>栈（Stack）：一种遵循后进先出（LIFO）原则的数据结构。</li>\n<li>队列（Queue）：一种遵循先进先出（FIFO）原则的数据结构。</li>\n<li>树（Tree）：一种层次结构的数据结构，包括二叉树、二叉搜索树等。</li>\n<li>图（Graph）：由节点和边组成的网络结构。</li>\n</ul>\n</li>\n<li>算法：\n<ul>\n<li>排序算法：如冒泡排序、插入排序、快速排序、归并排序等。</li>\n<li>搜索算法：如线性搜索、二分搜索、广度优先搜索、深度优先搜索等。</li>\n<li>图算法：如最短路径算法（Dijkstra 算法、Floyd-Warshall 算法）、最小生成树算法（Prim 算法、Kruskal 算法）等。</li>\n<li>动态规划算法：用于解决具有重叠子问题性质的问题，如背包问题、最长公共子序列等。</li>\n</ul>\n</li>\n</ol>\n<p>通过学习和应用数据结构和算法，开发人员可以优化程序的时间复杂度和空间复杂度，提高代码的效率和可维护性。同时，深入理解数据结构和算法的原理，可以帮助开发人员在解决各种问题时选择合适的数据结构和算法，提高问题解决能力。💻📚✨</p>\n<p>当涉及到数据结构和算法时，有许多概念和技术可以进一步探索。以下是一些进阶主题，可以帮助你深入了解数据结构和算法的更多内容：</p>\n<ol>\n<li>高级数据结构：\n<ul>\n<li>堆（Heap）：一种可以快速找到最大或最小元素的数据结构，常用于优先队列和堆排序。</li>\n<li>散列表（Hash Table）：使用散列函数将键映射到值的数据结构，实现高效的插入、查找和删除操作。</li>\n<li>树堆（Treap）：结合了二叉搜索树和堆的特性的数据结构，可以在 O (log n) 时间内实现插入、删除和查询。</li>\n<li>B 树（B-Tree）和 B + 树（B+ Tree）：用于在磁盘或其他辅助存储设备上组织和管理大量数据的数据结构。</li>\n</ul>\n</li>\n<li>算法设计技巧：\n<ul>\n<li>分治法（Divide and Conquer）：将问题划分为更小的子问题，并将子问题的解合并为原始问题的解。</li>\n<li>贪心算法（Greedy Algorithm）：每一步都做出局部最优选择，以期望达到全局最优解。</li>\n<li>动态规划（Dynamic Programming）：将问题划分为重叠子问题，并使用记忆化或自底向上的方式求解子问题，以得到最优解。</li>\n<li>回溯法（Backtracking）：通过尝试所有可能的解决方案，逐步构建解决方案的方法，可以用于解决组合、排列和搜索问题。</li>\n</ul>\n</li>\n<li>算法复杂度分析：\n<ul>\n<li>时间复杂度：描述算法执行所需的时间随输入规模增长而增加的速度。</li>\n<li>空间复杂度：描述算法在执行过程中所需的额外空间随输入规模增长而增加的速度。</li>\n<li>最坏情况复杂度：描述算法在最坏情况下所需的时间或空间。</li>\n<li>平均情况复杂度：描述算法在平均情况下所需的时间或空间。</li>\n<li>最好情况复杂度：描述算法在最好情况下所需的时间或空间。</li>\n</ul>\n</li>\n<li>算法优化和优化技巧：\n<ul>\n<li>空间换时间：通过使用额外的存储空间来加速算法的执行。</li>\n<li>迭代优化：将递归算法转换为迭代算法，减少函数调用开销。</li>\n<li>剪枝策略：通过排除无效的搜索空间来减少算法的计算量。</li>\n<li>并行计算：利用多个处理单元或线程同时执行任务，以提高算法的执行速度。</li>\n</ul>\n</li>\n</ol>\n<p>这些主题只是数据结构和算法领域中的一小部分。深入学习和实践这些概念和技术，可以帮助你成为更高效、更有创造力的程序员，并在解决问题时提供更优雅的解决方案。同时，通过阅读相关书籍、参与算法竞赛和实践编码，你可以不断提升自己在数据结构和算法方面的能力。💻📚✨</p>\n<h1 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> 数据库</h1>\n<p>数据库是指为了方便组织、存储和管理数据而设计的系统。它是一个可持久化存储数据的仓库，可以对数据进行增删改查等操作。数据库管理系统（DBMS）是用于管理数据库的软件，它提供了一组操作和工具来创建、访问、维护和控制数据库。</p>\n<p>常见的数据库类型包括：</p>\n<ol>\n<li>\n<p>关系型数据库（RDBMS）：</p>\n<p>关系型数据库使用表格（表）来组织数据，表由行（记录）和列（字段）组成。每个表代表一个实体或概念，而行则表示该实体的具体实例。关系型数据库使用结构化查询语言（SQL）来定义和操作数据。常见的关系型数据库包括 MySQL、Oracle、Microsoft SQL Server 和 PostgreSQL 等。</p>\n</li>\n<li>\n<p>非关系型数据库（NoSQL 数据库）：</p>\n<p>非关系型数据库不使用表格结构，而是使用其他数据模型来组织数据，如键值对、文档、列族和图等。非关系型数据库通常具有更高的可伸缩性和灵活性，适用于大规模分布式系统和需要快速存储和检索非结构化数据的场景。常见的非关系型数据库包括 MongoDB、Redis、Cassandra 和 Elasticsearch 等。</p>\n</li>\n</ol>\n<p>数据库具有以下特点和优势：</p>\n<ul>\n<li>数据持久化：数据库可以将数据持久地存储在磁盘或其他存储介质中，确保数据不会丢失。</li>\n<li>数据共享和集中管理：多个用户和应用程序可以共享数据库中的数据，实现数据的集中管理和一致性。</li>\n<li>数据一致性和完整性：数据库提供事务和约束来维护数据的一致性和完整性。</li>\n<li>数据安全性：数据库提供了访问控制和权限管理机制，保护数据的安全性和机密性。</li>\n<li>数据查询和分析：数据库支持复杂的查询和分析操作，可以提取有用的信息和洞察力。</li>\n<li>数据的高可用性和扩展性：数据库可以配置为具有高可用性和水平扩展能力，以适应不同的业务需求。</li>\n</ul>\n<p>在开发应用程序时，选择适合的数据库类型和设计良好的数据库结构是非常重要的。根据应用程序的需求和数据特性，可以选择关系型数据库或非关系型数据库，并设计合适的数据模型和查询方案，以实现高效的数据存储和检索。同时，掌握数据库管理和优化技巧，可以提高数据库性能和数据访问效率。</p>\n<h1 id=\"信息安全\"><a class=\"anchor\" href=\"#信息安全\">#</a> 信息安全</h1>\n<p>在信息安全领域，确保计算机系统和数据的保密性、完整性和可用性是至关重要的。以下是对您提出的一些相关技术的解释：</p>\n<ol>\n<li>加密算法：加密算法用于将敏感信息转换为不可读的形式，以防止未经授权的访问。它使用密钥来对数据进行加密，并且只有拥有正确密钥的人才能解密和访问原始数据。常见的加密算法包括对称加密算法（如 AES）和非对称加密算法（如 RSA）。</li>\n<li>身份认证：身份认证是确认用户身份的过程。它基于用户提供的凭据（如用户名和密码）或使用其他身份验证方法（如指纹识别、面部识别或智能卡）来验证用户的身份。身份认证可以防止未经授权的用户访问系统和数据。</li>\n<li>访问控制：访问控制是通过授权和权限管理来限制对系统和数据的访问。它确保只有经过授权的用户可以获取特定资源或执行特定操作。访问控制可以基于角色（如管理员、用户、访客）或基于属性（如用户所属部门或级别）进行配置。</li>\n<li>防火墙：防火墙是一种网络安全设备，用于监控和控制进出网络的网络流量。它可以根据预定义的安全策略过滤网络流量，阻止未经授权的访问和恶意活动。</li>\n<li>漏洞管理和漏洞扫描：漏洞管理是指对系统和应用程序进行持续的漏洞扫描和修复，以减少潜在的安全漏洞。漏洞扫描工具可以自动扫描系统以发现已知的漏洞，并提供修复建议。</li>\n<li>传输层安全性（TLS）：传输层安全性是一种协议，用于在网络通信中提供加密和数据完整性保护。TLS 通常在 Web 浏览器和服务器之间的通信中使用，以确保敏感信息（如登录凭据和信用卡信息）在传输过程中的安全。</li>\n<li>威胁情报：威胁情报是关于潜在威胁和攻击者行为的信息。它包括有关已知的恶意软件、漏洞和攻击技术的信息。威胁情报可以帮助组织了解当前的安全威胁，并采取适当的防御措施。</li>\n<li>安全审计和日志管理：安全审计和日志管理是记录和监控系统活动的过程。通过收集、分析和监视日志数据，可以检测潜在的安全事件和异常行为，并进行安全审计和调查。</li>\n<li>双因素认证：双因素认证是一种身份验证方法，要求用户提供两个或多个不同类型的凭据来验证其身份。例如，使用用户名 / 密码组合进行身份验证后，还需要提供一个动态生成的验证码或指纹扫描等。</li>\n<li>社会工程学：社会工程学是指利用心理学和人类行为来欺骗和操纵人员，以获取未经授权的访问或敏感信息。社会工程学攻击可以通过钓鱼邮件、电话欺骗或伪装成信任的个体来实施。</li>\n<li>脆弱性评估和渗透测试：脆弱性评估是识别系统和应用程序中存在的安全漏洞和弱点的过程。渗透测试是模拟真实攻击者的行为，以测试系统的安全性，并发现可能的漏洞和攻击路径。</li>\n<li>安全策略和标准：安全策略是组织内制定的指导方针和规则，用于确保信息安全。安全标准是具体的技术规范，指定了安全配置和控制的要求。</li>\n<li>应急响应和恢复：应急响应是在发生安全事件或攻击时采取的紧急措施，以减少损害并迅速恢复正常操作。恢复过程涉及修复受损系统、重新建立安全配置和确保业务连续性。</li>\n<li>安全意识培训和教育：安全意识培训是向员工提供关于安全威胁、最佳实践和行为准则的教育。通过提高员工对安全的认识和知识水平，可以减少人为安全漏洞的风险。</li>\n<li>数据保护和隐私：数据保护措施旨在保护敏感数据的机密性和完整性，以防止未经授权的访问、泄露和篡改。隐私保护涉及确保个人数据的合法收集、使用和存储，符合相关的隐私法规和政策。</li>\n<li>安全管理和合规性：安全管理涉及制定和实施安全政策、流程和控制，并进行风险评估和安全审计。合规性是确保组织符合适用的法律法规、行业标准和合同要求。</li>\n<li>安全信息和事件管理（SIEM）：SIEM 是一种综合性的安全管理解决方案，用于收集、分析和报告来自各种安全设备和日志源的信息。它可以帮助组织实时监控和应对安全事件。</li>\n<li>云安全：云安全是保护云计算环境中的数据和资源免受威胁和攻击的措施。它涉及对云服务的访问控制、加密、身份认证和安全配置的管理。</li>\n</ol>\n<p>综上所述，信息安全是一个广泛而复杂的领域，包含许多技术、实践和概念。保护计算机系统和数据的安全性需要综合性的方法，包括技术控制、策略制定、培训教育和合规性管理。</p>\n",
            "tags": [
                "计算机",
                "实用推荐",
                "推荐"
            ]
        },
        {
            "id": "https://mingcy.cn/2024/03/22/jingzhi/",
            "url": "https://mingcy.cn/2024/03/22/jingzhi/",
            "title": "【计算机基础】关于进制",
            "date_published": "2024-03-21T16:00:00.000Z",
            "content_html": "<h1 id=\"计算机基础关于进制\"><a class=\"anchor\" href=\"#计算机基础关于进制\">#</a> 【计算机基础】关于进制</h1>\n<h3 id=\"进制是什么-常见的进制\"><a class=\"anchor\" href=\"#进制是什么-常见的进制\">#</a> <strong>进制是什么 &amp; 常见的进制</strong></h3>\n<p>学计算机，那就肯定得懂一样东西 ——<strong> 进制</strong>（哪怕你没有学过，多少也会懂点）</p>\n<p>那进制是啥？</p>\n<blockquote>\n<p>进制也就是进位计数制，是人为定义的带进位的计数方法（有不带进位的计数方法，比如原始的结绳计数法，唱票时常用的 “正” 字计数法，以及类似的 tally mark 计数）。 对于任何一种进制 —X 进制，就表示每一位置上的数运算时都是逢 X 进一位。 十进制是逢十进一，<a href=\"https://www.rsnocsi.cn/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEQlODElRTUlODUlQUQlRTglQkYlOUIlRTUlODglQjYvNDE2MjQ1Nw==\">十六进制</a>是逢十六进一，<a href=\"https://www.rsnocsi.cn/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkElOEMlRTglQkYlOUIlRTUlODglQjYvMzYxNDU3\">二进制</a>就是逢二进一，以此类推，x 进制就是逢 x 进位。</p>\n<p><a href=\"https://www.rsnocsi.cn/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTglQkYlOUIlRTUlODglQjYvMzE3NDU3\">百度百科</a></p>\n</blockquote>\n<p>进制这玩意，说白了就是我们数数的一个方式，像啥十进制（大家都知道的）就是满十进一</p>\n<p>那进制有啥呢？常见的进制有：</p>\n<ul>\n<li>十进制最常见的，对人来说最常用的</li>\n<li>二进制计算机里面用的，计算机的底层进制就是二进制，这是因为计算机是由逻辑电路组成的，而逻辑电路通常只有两个状态：开关的接通与断开，这两种状态正好可以用二进制的 1 和 0 表示。二进制是非常常见的，天生就与计算机有着紧密的关系，它正好能代表高低电平，开关的接通与断开，也与逻辑学中的真，假相吻合（布尔类型的 True 和 False）</li>\n<li>八进制常见于计算机，经常用于简化二进制的计算，但用得也确实比较少</li>\n<li>十六进制也是计算机中经常使用的，经常用来表示存储器的地址，用得稍微比八进制多一点。八进制和十六进制只是为了简化二进制的存在的。在计算器底层中，是只能使用二进制的，但是二进制只有 0 和 1，动不动就进位，导致二进制数的位数通常都很多，难以记录，所以经常使用八进制和十六进制来简化。</li>\n<li>为什么是十六进制和八进制来帮忙？而不是我们更加熟悉的十进制？原因很简单，十六进制的基数是 16，八进制的基数是 8，二进制的基数是 2，十进制的基数是 10。它们之中，16 是 2 的 4 次方，8 是 2 的 3 次方（立方），但 10 与 2 并没有什么整数次方的关系。</li>\n</ul>\n<p>上面这些呢，都是我们日常能见到的进制</p>\n<h3 id=\"各个进制的特点\"><a class=\"anchor\" href=\"#各个进制的特点\">#</a> <strong>各个进制的特点</strong></h3>\n<h3 id=\"十进制的特点\"><a class=\"anchor\" href=\"#十进制的特点\">#</a> <strong>十进制的特点：</strong></h3>\n<ul>\n<li><strong>简写：DEC</strong></li>\n<li>** 特点：** 满十进一</li>\n<li>** 计数 ：**0、1、2、3、4、5、6、7、8、9（10、11、12…19、20…）到九了，但我们是满十进一，个位变成 0，向十位进一，那下一位就是 10。个位满十，向十位进一；十位满十，向百位进一……</li>\n<li>** 单位数字：**10 个（0-9）</li>\n</ul>\n<h3 id=\"二进制的特点\"><a class=\"anchor\" href=\"#二进制的特点\">#</a> <strong>二进制的特点：</strong></h3>\n<ul>\n<li><strong>简写：BIN</strong></li>\n<li>** 特点：** 满二进一</li>\n<li>** 计数：**0、1（10、11、100…）到一了，但我们是满二进一，个位变成 0，向十位进一，那下一位就是 10。个位满二，向十位进一；十位满二，向百位进一……</li>\n<li>** 单位数字：**2 个（0、1）</li>\n</ul>\n<h3 id=\"八进制的特点\"><a class=\"anchor\" href=\"#八进制的特点\">#</a> <strong>八进制的特点：</strong></h3>\n<ul>\n<li><strong>简写：OCT</strong></li>\n<li>** 特点：** 满八进一</li>\n<li>** 计数：**0、1、2、3、4、5、6、7、（10、11、12…）到七了，但我们是满八进一，个位变成 0，向十位进一，那下一位就是 10。个位满八，向十位进一；十位满八，向百位进一……</li>\n<li>** 单位数字：**8 个（0-7）</li>\n</ul>\n<h3 id=\"十六进制的特点\"><a class=\"anchor\" href=\"#十六进制的特点\">#</a> <strong>十六进制的特点：</strong></h3>\n<ul>\n<li><strong>简写：HEX</strong></li>\n<li>** 特点：** 满十六进一</li>\n<li>** 计数：**0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F（10、11、12……1A、1B）到 9 了，之后的数字不能是像 10、11 一样的两位数，所以之后的数字以 A-F 代替 10-15。</li>\n<li>** 单位数字：**16 个（0-F）</li>\n</ul>\n<h3 id=\"十进制与任意进制之间的互相转换\"><a class=\"anchor\" href=\"#十进制与任意进制之间的互相转换\">#</a> <strong>十进制与任意进制之间的互相转换</strong></h3>\n<h3 id=\"十进制转任意进制\"><a class=\"anchor\" href=\"#十进制转任意进制\">#</a> <strong>十进制转任意进制：</strong></h3>\n<p>十进制转任意进制通常采用除基数，倒取余的办法，具体做法就是：把要转换的数除目标进制数的基数，直到整数变为 0 为止（下面以 43 转二进制为例）</p>\n<p>43 整除 2，得 21，余 1</p>\n<p>21 整除 2，得 10，余 1</p>\n<p>10 整除 2，得 5，余 0</p>\n<p>5 整除 2，得 2，余 1</p>\n<p>2 整除 2，得 1，余 0</p>\n<p>1 整除 2，得 0，余 1</p>\n<p>把余数从下往上进行记录，得：101011</p>\n<p>即 43 (10) =101011 (2)</p>\n<p>其它数，其它进制同理，只是十六进制要记得用 A-F 替换 10-15</p>\n<h3 id=\"任意进制转十进制\"><a class=\"anchor\" href=\"#任意进制转十进制\">#</a> <strong>任意进制转十进制：</strong></h3>\n<p>任意进制转十进制，一般用把二进制数按权展开、再相加的办法，举个例子（101011 转十进制）</p>\n<p>1<em>2^5 + 0</em>2^4 + 1<em>2^3 + 0</em>2^2 + 1<em>2^1 + 1</em>2^0</p>\n<p>=32 + 0 + 8 + 0 + 2 + 1</p>\n<p>=43</p>\n<p>即：101011 (2) = 43 (10)</p>\n<p>其它数，其它进制同理，只是十六进制要记得先把 A-F 替换成相应的 10-15，再参与运算</p>\n<h3 id=\"十进制转任意进制小数\"><a class=\"anchor\" href=\"#十进制转任意进制小数\">#</a> <strong>十进制转任意进制（小数）：</strong></h3>\n<p>十进制小数转换成二进制小数采用 “乘 2 取整，顺序排列” 法。下面以十进制转二进制（小数）为例：</p>\n<p>具体做法是：先将整数部分与小数部分分开，整数部分直接转换成二进制数，小数部分的转换办法是：用 2 乘十进制小数，可以得到积，将积的整数部分取出，再用 2 乘余下的小数部分，又得到一个积，再将积的整数部分取出，如此进行，直到积中的小数部分为零，或者达到所要求的精度为止。（原因是：有很多小数转换成二进制是无限小数，只能取舍，所以一般会设定一个精度，达到精度后就停止计算。）</p>\n<p>例如（5.625 转为二进制）：</p>\n<p>分成 5、0.625</p>\n<p>5 转换成二进制是：101，先放一边</p>\n<p>0.625*2 = 1.25，取整为 1</p>\n<p>0.25*2 = 0.5，取整为 0</p>\n<p>0.5*2 = 1，取整为 1</p>\n<p>顺着取整，得 101</p>\n<p>所以 0.625 (10) = 0.101 (2)</p>\n<p>所以 5.625 (10) = 101.625 (2)</p>\n<p>如果小数部分怎么乘都不为 0 的话，那就按之前规定的，算到精度要求为止。</p>\n<p>例如：0.56 转换为二进制（保留小数点后 5 位）</p>\n<p>0.56*2 = 1.12，取整为 1</p>\n<p>0.12*2 = 0.24，取整为 0</p>\n<p>0.24*2 = 0.48，取整为 0</p>\n<p>0.48*2 = 0.96，取整为 0</p>\n<p>0.96*2 = 1.92，取整为 1</p>\n<p>……</p>\n<p>所以，0.56 (10) ≈ 0.10001 (2)</p>\n<h3 id=\"任意进制转十进制小数\"><a class=\"anchor\" href=\"#任意进制转十进制小数\">#</a> <strong>任意进制转十进制（小数）：</strong></h3>\n<p>还是以二进制为例，二进制的小数转换为十进制主要是乘以 2 的负次方，从小数点后开始，依次乘以 2 的负一次方，2 的负二次方，2 的负三次方等。比如：0.101 转换为十进制：</p>\n<p>1<em>2^-1 + 0</em>2^-2 + 1*2^-3</p>\n<p>=½ + 0 + 1/8</p>\n<p>=0.625</p>\n<p>所以，0.101 (2) = 0.625 (10)</p>\n<h3 id=\"进制转换的算法实现python\"><a class=\"anchor\" href=\"#进制转换的算法实现python\">#</a> <strong>进制转换的算法实现（Python）</strong></h3>\n<p><a href=\"https://www.rsnocsi.cn/1679.html\">Python 200 行代码实现任意进制与十进制之间的互相转化 - Abyss - 博客</a></p>\n",
            "tags": [
                "编程语言",
                "计算机",
                "科幻科普"
            ]
        }
    ]
}